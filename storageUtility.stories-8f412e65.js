import{_ as e,e as t,f as o,g as a,j as n}from"./preview-bc6c89ca.js";import"./lit-html-2435d3b6.js";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var a in o)Object.prototype.hasOwnProperty.call(o,a)&&(e[a]=o[a])}return e}).apply(this,arguments)}const l={},s="wrapper";function i(e){let{components:o}=e,i=a(e,["components"]);return t(s,r({},l,i,{components:o,mdxType:"MDXLayout"}),t(n,{title:"JS Helpers|Memory Storage",mdxType:"Meta"}),t("h1",null,"Storage Utility Helper"),t("p",null,"Store and/or remember user input/information in the browser (even between sites and sessions)."),t("p",null,"To see what's in ",t("inlineCode",{parentName:"p"},"localStorage")," in chrome..."),t("ol",null,t("li",{parentName:"ol"},"open the developer console (right click + inspect)"),t("li",{parentName:"ol"},"go to the 'Application' tab"),t("li",{parentName:"ol"},"look in the left sidebar for the 'Storage > Local Storage' entry "),t("li",{parentName:"ol"},"click on the entry for the current site")),t("h2",null,"Usages"),t("h3",null,"Writing a Value to Local Storage"),t("pre",null,t("code",r({parentName:"pre"},{className:"language-js"}),"import {setExpiringLocalValue} from '../_helpers/storageUtility';  // 'https://unpkg.com/bulib-wc@latest/src/_helpers/storageUtility.js?module'\nconst key_of_the_local_storage_entry = \"component-name--unique-code\";\n\n// determine the value and use the method to `try` to write the value\nlet value_to_set_it_to = \"information we want to store in localStorage\";\nlet valueFromLocalStorage = setExpiringLocalValue(key_of_the_local_storage_entry, value_to_set_it_to);\n")),t("p",null,t("em",{parentName:"p"},"NOTE: You can see a working example of this in ",t("inlineCode",{parentName:"em"},"src/announce/announce.js"))),t("h3",null,"Reading a Value from Local Storage"),t("pre",null,t("code",r({parentName:"pre"},{className:"language-js"}),"import {readExpiringLocalValue} from '../_helpers/storageUtility';  // 'https://unpkg.com/bulib-wc@latest/src/_helpers/storageUtility.js?module'\nconst key_of_the_local_storage_entry = \"component-name--unique-code\";\n\n// `try` to read the value from localStorage from the given key with a fallback\nlet default_value = \"this is the default value\";\nlet valueFromLocalStorage = readExpiringLocalValue(key_of_the_local_storage_entry, default_value);\n")),t("p",null,t("em",{parentName:"p"},"NOTE: You can see a working example of this in ",t("inlineCode",{parentName:"em"},"src/announce/announce.js"))))}i.isMDXComponent=!0;const p=()=>{throw new Error("Docs-only story")};p.story={parameters:{docsOnly:!0}};const c={title:"JS Helpers|Memory Storage",includeStories:["__page"]},m={};c.parameters=c.parameters||{},c.parameters.docs=e({},c.parameters.docs||{},{page:()=>t(o,{mdxStoryNameToId:m},t(i,null))});export default c;export{p as __page};
//# sourceMappingURL=storageUtility.stories-8f412e65.js.map
