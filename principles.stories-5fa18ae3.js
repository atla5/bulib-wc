import{_ as e,e as a,f as n,g as t}from"./preview-bc6c89ca.js";import"./lit-html-2435d3b6.js";function r(){return(r=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}const i=(l="Meta",function(e){return console.warn("Component "+l+" was not imported, exported, or provided by MDXProvider as global scope"),a("div",e)});var l;const o={},s="wrapper";function p(e){let{components:n}=e,l=t(e,["components"]);return a(s,r({},o,l,{components:n,mdxType:"MDXLayout"}),a(i,{title:"Welcome|Principle of Least Power",mdxType:"Meta"}),a("h1",null,"Principle of Least Power"),a("p",null,"I've talked about this in the ",a("a",r({parentName:"p"},{href:"https://docs.google.com/document/d/1W--y5hT2MFRZeCHsT9cEPP7s8OEt9fWHznylBPTO1Es/edit#"}),"overall technical strategy"),",\nbut I think it's very important. "),a("p",null,"The principle essentially boils down to: ",a("strong",{parentName:"p"},"don’t use a sledgehammer where a regular hammer will suffice"),". "),a("p",null,"Give preference to the ",a("strong",{parentName:"p"},"simplest solution")," that "),a("ul",null,a("li",{parentName:"ul"},"is easier to maintain/understand, "),a("li",{parentName:"ul"},"assumes the least about the end user (internet connection speed, javascript enabled, screenreader, etc) "),a("li",{parentName:"ul"},"and relies on the fewest dependencies, abstractions, and complications ")),a("h2",null,"Applications/Examples"),a("p",null,"In practice, this amounts to a bit of a repeated cascade of choices from server-side to static all\nthe way down to basic HTML "),a("ul",null,a("li",{parentName:"ul"},"don’t use ",a("strong",{parentName:"li"},"a server-side language")," (e.g. php) when you can use static or client-side instead"),a("li",{parentName:"ul"},"don't use ",a("strong",{parentName:"li"},"a large framework")," when you're using a small part of it or could more simply write your own"),a("li",{parentName:"ul"},"don’t use ",a("strong",{parentName:"li"},"a library")," when you can implement it almost as easily with use vanilla javascript "),a("li",{parentName:"ul"},"don’t use ",a("strong",{parentName:"li"},"javascript")," when you can just use html+css (e.g. bulib-header)"),a("li",{parentName:"ul"},"don’t ",a("strong",{parentName:"li"},"remake/repurpose")," something that html already does effectively (e.g. form submission)")),a("p",null,"At a higher level this gets to: "),a("ul",null,a("li",{parentName:"ul"},a("strong",{parentName:"li"},"avoid build steps and configuration")," hells where possible/makes sense",a("ul",{parentName:"li"},a("li",{parentName:"ul"},"prefer using ",a("inlineCode",{parentName:"li"},"css variables")," to something like ",a("inlineCode",{parentName:"li"},"scss")," variables and methods"),a("li",{parentName:"ul"},"simplify configuration, automation, deployment with standard ",a("inlineCode",{parentName:"li"},"package.json")," on ",a("inlineCode",{parentName:"li"},"npm")),a("li",{parentName:"ul"},"leverage the ",a("inlineCode",{parentName:"li"},"js module")," standard and ",a("inlineCode",{parentName:"li"},"unpkg")," (potentially pika) to avoid transpiling/bundling"))),a("li",{parentName:"ul"},a("strong",{parentName:"li"},"use Web Standards")," whenever possible/it makes sense",a("ul",{parentName:"li"},a("li",{parentName:"ul"},"prefer using ",a("inlineCode",{parentName:"li"},"css grid")," to more complicated and heavy js/css libraries (e.g. material, bootstrap, foundation)")))),a("h2",null,"Benefits"),a("ul",null,a("li",{parentName:"ul"},a("strong",{parentName:"li"},"simplicity"),": developer or debugger has less to learn, understand, and keep in mind while doing their work "),a("li",{parentName:"ul"},a("strong",{parentName:"li"},"independence"),": keeping up with dependencies can be a chore and add maintenance costs + vulnerability to breaking"),a("li",{parentName:"ul"},a("strong",{parentName:"li"},"interoperability"),": as you increase your technical complexity, browser compatibility (and occasionally accessibility) goes down and brittleness/complicatedness increases"),a("li",{parentName:"ul"},a("strong",{parentName:"li"},"longevity"),": code that is closer to the web standards (less dependent on trends and framework-of-the-day) is less likely to become 'legacy' and have to be redone over time or decommissioned "),a("li",{parentName:"ul"},a("strong",{parentName:"li"},"hiring/experience"),": we want interns/student workers to get transferable experience, and don't want to look for developers based on framework-specific expertise")))}p.isMDXComponent=!0;const m=()=>{throw new Error("Docs-only story")};m.story={parameters:{docsOnly:!0}};const d={title:"Welcome|Principle of Least Power",includeStories:["__page"]},c={};d.parameters=d.parameters||{},d.parameters.docs=e({},d.parameters.docs||{},{page:()=>a(n,{mdxStoryNameToId:c},a(p,null))});export default d;export{m as __page};
//# sourceMappingURL=principles.stories-5fa18ae3.js.map
